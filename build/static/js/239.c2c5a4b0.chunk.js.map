{"version":3,"sources":["views/apps/services/Recharg.js"],"names":["Recharg","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","field","width","cellRendererFramework","params","data","agent_id","walletId","customer","firstname","lastname","customerId","number","biller_code","amount","filter","className","moment","createdAt","format","onGridReady","gridApi","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axios","get","then","response","console","log","this","Fragment","breadCrumbTitle","breadCrumbActive","tag","length","size","right","onClick","placeholder","onChange","e","target","value","Ripple","color","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/239.c2c5a4b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { ChevronDown, Edit, Eye, Trash2 } from \"react-feather\";\r\n// import { history } from \"../../.././history\";\r\nimport axios from \"axios\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nclass Recharg extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"Transaction ID\",\r\n        field: \"agent_id\",\r\n        width: 175,\r\n        // filter: true,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n             <span>{params.data.agent_id}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"UserName\",\r\n        field: \"walletId.customer.firstname\",\r\n        width: 175,\r\n        // filter: true,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.walletId?.customer?.firstname} {params.data.walletId?.customer?.lastname} </span>\r\n              \r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"UserId\",\r\n        field: \"walletId.customer.customerId\",\r\n        // filter: \"true\",\r\n        width: 140,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.walletId?.customer?.customerId}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      // {\r\n      //   headerName: \"Date\",\r\n      //   field: \"Date\",\r\n      //   filter: true,\r\n      //   width: 250,\r\n      // },\r\n      // {\r\n      //   headerName: \"Email\",\r\n      //   field: \"customer.email\",\r\n      //   width: 150,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div>\r\n      //         <span>{params.data.walletId?.customer?.email}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n      {\r\n        headerName: \"Phone Number\",\r\n        field: \"number\",\r\n        // filter: true,\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.number}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      // {\r\n      //   headerName: \"Services\",\r\n      //   field: \"recharge_type\",\r\n      //   // filter: true,\r\n      //   width: 125,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div>\r\n      //         <span>{params.data.recharge_type}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n\r\n      {\r\n        headerName: \"Operator\",\r\n        field: \"biller_code\",\r\n        // filter: true,\r\n        width: 125,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.biller_code}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"HashTag\",\r\n        field: \"amount\",\r\n        // filter: true,\r\n        width: 125,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.amount}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      // {\r\n      //   headerName: \"Date\",\r\n      //   field: \"createdAt\",\r\n      //   // filter: true,\r\n      //   width: 125,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div>\r\n      //         <span>{moment(this.state.data?.createdAt).format(\"ll\")}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n      {\r\n        headerName: \" Date\",\r\n        field: \"createdAt\",\r\n        filter: true,\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{moment(params.data.createdAt).format(\"ll\")}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      // {\r\n      //   headerName: \"Payment Method\",\r\n      //   field: \"walletId.pay_method\",\r\n      //   width: 140,\r\n      //   cellRendererFramework: (params) => {\r\n      //     return (\r\n      //       <div>\r\n      //         <span>{params.data.walletId?.pay_method}</span>\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n      \r\n      // {\r\n      //     headerName: \"Image\",\r\n      //     field: \"walletId.depsite_file\",\r\n         \r\n      //     width: 200,\r\n      //     setColumnVisible: false,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div className=\"d-flex align-items-center cursor-pointer\">\r\n                \r\n      //           <img\r\n      //             className=\" rounded-circle  mr-3\"\r\n      //             src= {params.data.walletId?.depsite_file}\r\n      //             alt=\"user avatar\"\r\n      //             height=\"40\"\r\n      //             width=\"40\"\r\n      //           /> \r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n        // {\r\n        //   headerName: \"Status\",\r\n        //   field: \"status\",\r\n        //   width: 150,\r\n        //   cellRendererFramework: (params) => {\r\n        //     return params.data.value === \"Success\" ? (\r\n        //       <div className=\"badge badge-pill badge-success\">\r\n        //         {params.data.status}\r\n        //       </div>\r\n        //     ) : params.value === \"Pending\" ? (\r\n        //       <div className=\"badge badge-pill badge-warning\">\r\n        //         {params.data.status}\r\n        //       </div>\r\n        //     ) : null;\r\n        //   },\r\n        // },\r\n      // {\r\n      //   headerName: \"Actions\",\r\n      //   field: \"transactions\",\r\n      //   width: 150,\r\n      //   cellRendererFramework: params => {\r\n      //     return (\r\n      //       <div className=\"actions cursor-pointer\">\r\n      //         <Eye\r\n      //           className=\"mr-50\"\r\n      //           size=\"25px\"\r\n      //           color=\"green\"\r\n                \r\n      //         />\r\n      //          <Edit\r\n      //           className=\"mr-50\"\r\n      //           size=\"25px\"\r\n      //           color=\"blue\"\r\n              \r\n      //         /> \r\n      //         <Trash2\r\n      //           size=\"25px\"\r\n      //           color=\"red\"\r\n      //           onClick={() => {\r\n      //             let selectedData = this.gridApi.getSelectedRows();\r\n      //             this.runthisfunction(params.data._id);\r\n      //             this.gridApi.updateRowData({ remove: selectedData });\r\n      //            }}\r\n      //         />\r\n      //       </div>\r\n      //     );\r\n      //   },\r\n      // },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    //  let { id } = this.props.match.params;\r\n\r\n    axios.get(`http://44.205.32.29:8000/admin/mobile_rechargelist`).then((response) => {\r\n      let rowData = response.data.data;\r\n      // JSON.stringify(rowData);\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n\r\n  onGridReady = params => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = val => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = val => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Transaction List\"\r\n          //   breadCrumbParent=\"Forms & Tables\"\r\n          breadCrumbActive=\"Wallet \"\r\n        />\r\n        <Card className=\"overflow-hidden agGrid-card\">\r\n                   {/* <div className=\"dpadd p-2\">\r\n                      <Link to=\"adddeposit\">\r\n                      <Button\r\n                        className=\" btn btn-success float-right\"\r\n                     \r\n                      >\r\n                        Add\r\n                      </Button>\r\n                      </Link>\r\n                  </div> */}\r\n          <CardBody className=\"py-0\">\r\n            {this.state.rowData === null ? null : (\r\n              <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                  <div className=\"mb-1\">\r\n                    <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                      <DropdownToggle tag=\"div\">\r\n                        {this.gridApi\r\n                          ? this.state.currenPageSize\r\n                          : \"\" * this.state.getPageSize -\r\n                            (this.state.getPageSize - 1)}{\" \"}\r\n                        -{\" \"}\r\n                        {this.state.rowData.length -\r\n                          this.state.currenPageSize * this.state.getPageSize >\r\n                        0\r\n                          ? this.state.currenPageSize * this.state.getPageSize\r\n                          : this.state.rowData.length}{\" \"}\r\n                        of {this.state.rowData.length}\r\n                        <ChevronDown className=\"ml-50\" size={15} />\r\n                      </DropdownToggle>\r\n                      <DropdownMenu right>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(20)}\r\n                        >\r\n                          20\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(50)}\r\n                        >\r\n                          50\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(100)}\r\n                        >\r\n                          100\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(134)}\r\n                        >\r\n                          134\r\n                        </DropdownItem>\r\n                      </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                  </div>\r\n                  <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                    <div className=\"table-input mr-1\">\r\n                      <Input\r\n                        placeholder=\"search...\"\r\n                        onChange={e => this.updateSearchQuery(e.target.value)}\r\n                        value={this.state.value}\r\n                      />\r\n                    </div>\r\n                     <div className=\"export-btn\">\r\n                      <Button.Ripple\r\n                        color=\"primary\"\r\n                        onClick={() => this.gridApi.exportDataAsCsv()}\r\n                      >\r\n                        Export as CSV\r\n                      </Button.Ripple>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <ContextLayout.Consumer>\r\n                  {context => (\r\n                    <AgGridReact\r\n                      gridOptions={{}}\r\n                      rowSelection=\"multiple\"\r\n                      defaultColDef={defaultColDef}\r\n                      columnDefs={columnDefs}\r\n                      rowData={rowData}\r\n                      onGridReady={this.onGridReady}\r\n                      colResizeDefault={\"shift\"}\r\n                      animateRows={true}\r\n                      floatingFilter={true}\r\n                      pagination={true}\r\n                      paginationPageSize={this.state.paginationPageSize}\r\n                      pivotPanelShow=\"always\"\r\n                      enableRtl={context.state.direction === \"rtl\"}\r\n                    />\r\n                  )}\r\n                </ContextLayout.Consumer>\r\n              </div>\r\n            )}\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Recharg;\r\n"],"sourceRoot":""}